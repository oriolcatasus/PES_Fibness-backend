openapi: 3.0.0
info:
  title: Fibness API
  version: "1.0.0"
servers:
  - url: 'http://10.4.41.146:3001'
    description: FIB server, UPC VPN required to connect
tags:
  - name: user
    description: Operations about users
  - name: training
    description: Operations about trainings
  - name: exercise
    description: Operations about exercises  
  - name: diet
    description: Operations about diets
  - name: meal
    description: Operations about meals
  - name: aliment
    description: Operations about aliments
paths:
  /user:
    post:
      summary: Creates a user
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: Oriol
                email:
                  type: string
                  example: oriol@example.com
                password:
                  type: string
                  description: Hashed user password
                  example: '5f4dcc3b5aa765d61d8327deb882cf99'
              required:
                - nombre
                - password
                - email
      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: boolean
                    enum: [true]
                  id:
                    type: integer
                    example: 12345
                required:
                  - created
                  - id
        400:
          description: >-
            Some required parameters are missing or with an incorrect type or a
            user with the given email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: boolean
                    enum: [false]
                  error:
                    type: string
                    example: null value in column 'email' violates constraint
                required:
                  - created 
                  - error
  /user/fb:
    post:
      summary: Log in a user with Facebook token
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: Oriol
                email:
                  type: string
                  example: oriol@example.com
                password:
                  type: string
                  description: Facebook token
                  example: '5f4dcc3b5aa765d61d8327deb882cf99'
              required:
                - nombre
                - password
                - email
      responses:
        200:
          description: User is correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 12345
                required:
                  - id
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 12345
                required:
                  - id
  /user/{id}:
    delete:
      summary: Deletes a user by id
      tags:
        - user
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to delete
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Ok
  /user/validate:
    post:
      summary: Validates the given user
      description: Validates a user with the given email and password exists
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: oriol@example.com
                password:
                  type: string
                  description: Hashed user password
                  example: '5f4dcc3b5aa765d61d8327deb882cf99'
              required:
                - email
                - password
      responses:
        200:
          description: Result from the validation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                    example: true
                  id:
                    type: integer
                    example: 1234
                required:
                  - result
  /user/{id}/trainings:
    get:
      summary: Gives the trainings of a user
      description: Returns all the trainings of the user with the given id
      tags:
        - user
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to get the trainigs from
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Set of the ids, names and descriptions of the requested trainings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    idelemento:
                      type: integer
                    nombre:
                      type: string
                    descripcion:
                      type: string
                example:
                  - idelemento: 28
                    nombre: TrainingTest
                    descripcion: DescriptionTest
                  - idelemento: 40
                    nombre: TrainingTest2
                    descripcion: DescriptionTest2
                required:
                - trainingSet
  /user/{id}/diets:
    get:
      summary: Gives the diets of a user
      description: Returns all the diets of the user with the given id
      tags:
        - user
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to get the diets from
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Set of the ids, names and descriptions of the requested diets
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    idelemento:
                      type: integer
                    nombre:
                      type: string
                    descripcion:
                      type: string
                example:
                  - idelemento: 23
                    nombre: DietTest
                    descripcion: DescriptionTest
                  - idelemento: 69
                    nombre: DietTest2
                    descripcion: DescriptionTest2
                required:
                - dietSet
  /user/resetPassword:
    put:
      summary: Replaces the current password of the user.
      description: Changes the password of the given user by the new one given
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: oriol@example.com
                password:
                  type: string
                  description: Hashed user password
                  example: '5f4dcc3b5aa765d61d8327deb882cf99'
              required:
                - email
                - password
      responses:
        200:
          description: OK
  /user/{id}/info:
    get:
      summary: Gets the info of the user
      description: Returns the information of the given user
      tags:
        - user
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to get the information from
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Information about the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  nombre:
                    type: string
                    example: UserTest
                  email:
                    type: string
                    example: user@example.com
                  tipousuario:
                    type: string
                    example: principiante
                  tipoperfil:
                    type: string
                    example: publico
                  genero:
                    type: boolean
                    example: true
                  descripcion:
                    type: string
                    example: Esta es mi descripcion
                  fechadenacimiento:
                    type: string
                    example: 1978-01-30
                  fecharegistro:
                    type: string
                    example: Thu Apr 29 2020
                  pais:
                    type: integer
                    example: 54
                  rutaimagen:
                    type: string
                    example: /home/marc/Escritorio/nodeTest
                  nseguidores:
                    type: integer
                    example: 37
                  nseguidos:
                    type: integer
                    example: 55
                  npost:
                    type: integer
                    example: 100
                required:
                  - nombre
                  - email
                  - tipousuario
                  - tipoperfil
                  - genero
                  - descripcion
                  - fechadenacimiento
                  - fecharegistro
                  - pais
                  - rutaimagen
                  - nseguidores
                  - nseguidos
                  - npost
    put:
      summary: Update user info
      tags:
        - user
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to get the information from
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: MiNuevoNombre
                genero:
                  type: boolean
                  example: false
                descripcion:
                  type: string
                  example: Mi nueva descripcion
                fechadenacimiento:
                  type: string
                  example: 1997-12-30
                pais:
                  type: integer
                  example: 56
              required:
                - nombre
                - genero
                - descripcion
                - fechadenacimiento
                - pais
      responses:
        200:
          description: User is correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 12345
                required:
                  - id
      
  /user/{id}/settings:
    get:
      summary: Gets the settings of the user
      description: Returns the settings of the given user
      tags:
        - user
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to get the settings from
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Settings of the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  sedad:
                    type: boolean
                    example: false
                  sdistancia:
                    type: boolean
                    example: true
                  sinvitacion:
                    type: boolean
                    example: true
                  sseguidor:
                    type: boolean
                    example: false
                  nmensaje:
                    type: boolean
                    example: false
                required:
                  - info
    put:
      summary: Updates the settings of the user
      description: Changes the settings of the user by the ones given
      tags:
        - user
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to get the settings from
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sEdad:
                  type: boolean
                  example: false
                sDistancia:
                  type: boolean
                  example: true
                sInvitacion:
                  type: boolean
                  example: true
                sSeguidor:
                  type: boolean
                  example: false
                nMensaje:
                  type: boolean
                  example: false
              required:
                - sEdad
                - sDistancia
                - sInvitacion
                - sSeguidor
                - nMensaje
      responses:
        200:
          description: OK
  '/training':
    post:
      summary: Creates a training
      description: Creates a training with the given description and name associated with the given user
      tags:
        - training
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: TrainingTest
                descripcion:
                  type: string
                  example: TrainingDescriptionTest
                idUser:
                  type: integer
                  description: id of the user
                  example: 2
              required:
                - nombre
                - descripcion
                - idUser
      responses:
        '201':
          description: Training created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  idelemento:
                    type: integer
                    example: 12345
                required:
                  - idelemento
        '400':
          description: >-
            Some required parameters are missing or with an incorrect type
  '/training/{id}':
    delete:
      summary: Deletes a training by id
      tags:
        - training
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the training to delete
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Ok
    put:
      summary: Update a training by id
      tags:
        - training
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the training to update
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: weekends training
                descripcion:
                  type: string
                  example: This training has vareity of exercices. 
              required:
                - name
                - description
      responses:
            '200':
              description: Ok
  /training/{idTraining}/activities:
    get:
      summary: Gives the activities(exercises or sports) of a certain training
      description: Returns all the activities of a given training id
      tags:
        - training
      parameters:
        - name: idTraining
          in: path
          required: true
          description: The id of the training
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Set of exercises or sports of a certain training
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    idActividad:
                      type: integer
                      description: id of the activity(sport or exercise)
                    nombre:
                      type: string
                     
                    descripcion:
                      type: string
                     
                    tiempoEjecucion:
                      type: integer
                      
                    numSets:
                      type: integer
        
                    numRepeticiones:
                      type: integer
                      
                    tiempoDescanso:
                      type: integer
                      
                  example:
                      - idActividad: 3
                        nombre: exerciseTest
                        descripcion: exerciseDescription
                        tiempoEjecucion: 4
                        numSets: 3 
                        numRepeticiones: 2
                        tiempoDescanso: 1
                      - idActividad: 4
                        nombre: exerciseTest_2
                        descripcion: exerciseDescription_2
                        tiempoEjecucion: 5
                        numSets: 4 
                        numRepeticiones: 1
                        tiempoDescanso: 10  
                  required:
                    - activitySet
                
                          
  '/exercise':
    post:
      summary: Creates an exercise
      description: Creates an exercise with the given description and it's associated to the given training 
      tags:
        - exercise
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idEntrenamiento:
                  type: integer
                  description: id of the training
                  example: 1
                nombre:
                  type: string
                  example: exerciseTest
                descripcion:
                  type: string
                  example: exerciseDescription
                tiempoEjecucion:
                  type: integer
                  example: 4
                numSets:
                  type: integer
                  example: 3  
                numRepeticiones:
                  type: integer
                  example: 2
                tiempoDescanso:
                  type: integer
                  example: 1
              required:
                - idEntrenamiento
                - nombre
                - descripcion
                - tiempoEjecucion
                - numSets
                - numRepeticiones
                - tiempoDescanso
                
      responses:
        '201':
          description: Exercise created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  idexercise:
                    type: integer
                    example: 34
                required:
                  - idexercise
        '400':
          description: >-
            Some required parameters are missing or with an incorrect type
            
  '/exercise/{id}':
    delete:
      summary: Deletes a exercise by id
      tags:
        - exercise
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the exercise to delete
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Ok
    put:
      summary: Update a exercise by id
      tags:
        - exercise
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the exercise to update
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: exerciseTestModified
                descripcion:
                  type: string
                  example: exerciseDescriptionModified
                tiempoEjecucion:
                  type: integer
                  example: 5
                numSets:
                  type: integer
                  example: 2  
                numRepeticiones:
                  type: integer
                  example: 1
                tiempoDescanso:
                  type: integer
                  example: 4
              required:
                - nombre
                - descripcion
                - tiempoEjecucion
                - numSets
                - numRepeticiones
                - tiempoDescanso
      responses:
            '200':
              description: Ok

              
  '/diet':
    post:
      summary: Creates a diet
      description: Creates a diet with the given description and name associated with the given user
      tags:
        - diet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: Hypertrophy diet
                descripcion:
                  type: string
                  example: Gain muscle
                idUser:
                  type: integer
                  description: id of the user
                  example: 2
              required:
                - nombre
                - descripcion
                - idUser
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  idelemento:
                    type: integer
                    example: 12345
                required:
                  - idelemento
        '400':
          description: >-
            Some required parameters are missing or with an incorrect type
  '/diet/{id}':
    delete:
      summary: Deletes a diet by id
      tags:
        - diet
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the diet to delete
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Ok
    put:
      summary: Update a diet by id
      tags:
        - diet
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the diet to update
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: weekends training
                description:
                  type: string
                  example: This training has vareity of exercices. 
              required:
                - name
                - description
      responses:
            200:
              description: Ok
  /diet/{idElemento}/{dia}:
    get:
      summary: Gives the meals of a certain day for a certain diet
      description: Returns all the meals of the diet with the given id for the specified day
      tags:
        - diet
      parameters:
        - name: idElemento
          in: path
          required: true
          description: The id of the diet to get the trainigs from
          schema:
            type: integer
            minimum: 1
        - name: dia
          in: path
          required: true
          description: day of the week
          schema:
            type: string
            enum: [lunes, martes, miercoles, jueves, viernes, sabado, domingo]
      responses:
        200:
          description: Set of the ids, names and timeToEat of the requested meals
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    idcomida:
                      type: integer
                    nombre:
                      type: string
                    horacomida:
                      type: string
                example:
                  - idcomida: 56
                    nombre: MealTest
                    horacomida: '10:00'
                  - idcomida: 100
                    nombre: MealTest2
                    horacomida: '18:00'
                required:
                - mealSet
  '/meal':
    post:
      summary: Creates a meal
      description: Creates a meal with the given parameters and associated to the given day and diet
      tags:
        - meal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: MealTest
                horaComida:
                  type: string
                  example: DescriptionTest
                idElemento:
                  type: integer
                  description: id of the diet
                  example: 10
                tipoDia:
                  type: string
                  description: day of the week
                  enum: [lunes, martes, miercoles, jueves, viernes, sabado, domingo]
              required:
                - nombre
                - descripcion
                - idUser
                - tipoDia
      responses:
        '201':
          description: Meal created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  idcomida:
                    type: integer
                    example: 12345
                required:
                  - idcomida
        '400':
          description: >-
            Some required parameters are missing or with an incorrect type
  '/meal/{id}':
    delete:
      summary: Deletes a meal by id
      tags:
        - meal
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the meal to delete
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Ok
    put:
      summary: Update a meal by id
      tags:
        - meal
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the meal to update
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: MealTest2
                horaComida:
                  type: string
                  example: DescriptionTest2
              required:
                - name
                - horaComida
      responses:
            200:
              description: Ok
  /meal/{idComida}/aliments:
    get:
      summary: Gives the aliments of a certain meal for a certain day of a certain diet
      description: Returns all the aliments of the day of the diet with the given id for the specified meal
      tags:
        - meal
      parameters:
        - name: idComida
          in: path
          required: true
          description: The id of the meal to get the aliments from
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Set of the ids, names, descriptions and calories of the requested aliments
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    idalimento:
                      type: integer
                    nombre:
                      type: string
                    descripcion:
                      type: string
                    calorias:
                      type: integer
                example:
                  - idalimento: 56
                    nombre: AlimentTest
                    descripcion: DescriptionTest
                    calorias: 300
                  - idalimento: 78
                    nombre: AlimentTest2
                    descripcion: DescriptionTest2
                    calorias: 400
                required:
                - alimentSet
  '/aliment':
    post:
      summary: Creates an aliment
      description: Creates an aliment with the given parameters and associated to the given meal
      tags:
        - aliment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: AlimentTest
                descripcion:
                  type: string
                  example: DescriptionTest
                calorias:
                  type: integer
                  example: 100
                idComida:
                  type: string
                  description: id of the meal
                  example: 34
              required:
                - nombre
                - descripcion
                - calorias
                - idComida
      responses:
        '201':
          description: Aliment created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  idalimento:
                    type: integer
                    example: 12345
                required:
                  - idalimento
        '400':
          description: >-
            Some required parameters are missing or with an incorrect type
  '/aliment/{id}':
    delete:
      summary: Deletes an aliment by id
      tags:
        - aliment
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the aliment to delete
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Ok
    put:
      summary: Updates an aliment by id
      tags:
        - aliment
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the aliment to update
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: AlimentTest2
                descripcion:
                  type: string
                  example: DescriptionTest2324324234
                calorias:
                  type: integer
                  example: 200
              required:
                - name
                - descripcion
                - calorias
      responses:
            200:
              description: Ok